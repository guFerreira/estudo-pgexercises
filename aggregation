/* Exercicio 1 - Count the number of facilities*/ 
SELECT count(fc.facid) 
FROM cd.facilities as fc;

/* Exercicio 2 - Count the number of expensive facilities*/
SELECT count(*) 
FROM cd.facilities
WHERE cd.facilities.guestcost >= 10;

/* Exercicio 3 - Count the number of recommendations each member makes.*/ 
SELECT mb.recommendedby, count(*)
	FROM cd.members as mb
	WHERE mb.recommendedby is not null
	GROUP BY recommendedby /*agrupa pelo recommendedby*/
ORDER BY recommendedby; /*ordena pelo numero do id*/

/* Exercicio 4 - List the total slots booked per facility*/ 
SELECT fc.facid, sum(bk.slots) as "Total Slots"
	FROM cd.facilities as fc
	INNER JOIN cd.bookings as bk
		ON bk.facid = fc.facid
	GROUP BY fc.facid
ORDER BY fc.facid;

/* Exercicio 5 - List the total slots booked per facility in a given month*/ 
SELECT fc.facid, SUM(bk.slots) as "Total Slots"
	FROM cd.facilities as fc
	INNER JOIN cd.bookings as bk
		ON bk.facid = fc.facid
	WHERE bk.starttime BETWEEN '2012-09-01' and '2012-10-01'
	GROUP BY fc.facid
ORDER BY "Total Slots";

/* Exercicio 6 - List the total slots booked per facility per month*/ 
SELECT fc.facid, extract(month FROM starttime) as month,
	sum(bk.slots) as "Total Slots"
	FROM cd.bookings as bk
	INNER JOIN cd.facilities as fc
		ON fc.facid = bk.facid
	WHERE extract(year FROM bk.starttime) = 2012
	/* WHERE bk.starttime BETWEEN '2012-01-01' AND '2012-12-31'  também funciona com between*/
	GROUP BY fc.facid, month
ORDER BY fc.facid, month

/* Exercicio 7 - Find the count of members who have made at least one booking*/ 
SELECT count(DISTINCT bk.memid)
	FROM cd.bookings as bk
	
/*
SELECT count(*) 
	FROM (SELECT DISTINCT mb.memid FROM cd.bookings) as mb
*/

/* Exercicio 8 - List facilities with more than 1000 slots booked*/

SELECT bk.facid, sum(bk.slots) as "Total Slots"
	FROM cd.bookings as bk
	GROUP BY bk.facid
	HAVING sum(bk.slots) > 1000 /*filtra por função agregada*/
ORDER BY bk.facid
/* Exercicio 9 - Find the total revenue of each facility*/ 
SELECT fc.name, sum(bk.slots * 
				   CASE 
				   		WHEN bk.memid = 0 THEN fc.guestcost
				   		ELSE fc.membercost
				   END) as revenue
	FROM cd.bookings as bk
	INNER JOIN cd.facilities fc
		ON bk.facid = fc.facid
	GROUP BY fc.name
ORDER BY revenue;

/* Exercicio 10 - Find facilities with a total revenue less than 1000*/ 
SELECT name, revenue FROM (
  SELECT fc.name, sum (CASE WHEN memid = 0
					  THEN slots * fc.guestcost
  						ELSE slots * membercost
  						END) as revenue /* subquerie pra achar revenue*/
	FROM cd.bookings bk
	INNER JOIN cd.facilities fc
		on bk.facid = fc.facid
	GROUP BY fc.name) as agregado WHERE revenue < 1000
ORDER BY revenue

/* Exercicio 11 - Output the facility id that has the highest number of slots booked*/ 
SELECT fc.facid, sum(bk.slots)as "Total Slots"
	FROM cd.facilities as fc
	INNER JOIN cd.bookings as bk
		ON bk.facid = fc.facid
	GROUP BY fc.facid
ORDER BY "Total Slots" DESC limit 1; /* limita a 1 linha o resultado da consulta*/

/* Exercicio 12 - List the total slots booked per facility per month, part 2*/ 


/* Exercicio 13 - List the total hours booked per named facility*/ 
select facs.facid, facs.name,
	trim(to_char(sum(bks.slots)/2.0, '9999999999999999D99')) as "Total Hours"
	/*to_char vai transformar o resultado da soma dos slots em uma string com o formato de numeros*/
	/*'9999999999999999D99' é o formato da saida, com 2 casas decimais após virgula*/
	from cd.bookings bks
	inner join cd.facilities facs
		on facs.facid = bks.facid
	group by facs.facid, facs.name
order by facs.facid;  

/* Exercicio 14 - List each member's first booking after September 1st 2012*/ 

/*min pega os mais recentes*/
SELECT mb.surname, mb.firstname, mb.memid, min(bk.starttime) as starttime
FROM cd.bookings bk
	INNER JOIN cd.members mb 
	on mb.memid = bk.memid
	WHERE starttime >= '2012-09-01'
	GROUP BY mb.surname, mb.firstname, mb.memid
ORDER BY mb.memid;

/* Exercicio 15 - Produce a list of member names, with each row containing the total member count*/ 
SELECT (SELECT count(*) FROM cd.members) /* count(*) over() função window é uma opcao*/
		as count, mb.firstname,  mb.surname
	FROM cd.members as mb
order by mb.joindate;

/* Exercicio 16 - Produce a numbered list of members*/ 
/*cria uma row number pra cada joindate*/
SELECT row_number() over(order by joindate), mb.firstname, mb.surname
	FROM cd.members as mb
ORDER BY mb.joindate
	
/* Exercicio 17 - Output the facility id that has the highest number of slots booked, again*/ 
SELECT facid, total FROM (
	SELECT facid, sum(slots) total, 
  			rank() over (order by sum(slots) desc) rank
        	FROM cd.bookings
		GROUP BY facid
	) as ranked
	WHERE rank = 1 ;
	
/*
Essa subquerie vai classificar do maior salário para o menor, e vai ser exibido essa
soma dos salários
SELECT facid, sum(slots) total, 
  			rank() over (order by sum(slots) desc) rank
        	FROM cd.bookings
		GROUP BY facid
*/
	
	

/* Exercicio 18 - Rank members by (rounded) hours used*/ 
/* Exercicio 19 - Find the top three revenue generating facilities*/ 
/* Exercicio 20 - Classify facilities by value*/ 
/* Exercicio 21 - Calculate the payback time for each facility*/ 
/* Exercicio 22 - Calculate a rolling average of total revenue*/ 
